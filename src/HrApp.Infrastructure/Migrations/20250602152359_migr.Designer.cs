// <auto-generated />
using System;
using HrApp.Infrastructure.Presistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HrApp.Infrastructure.Migrations
{
    [DbContext(typeof(HrAppContext))]
    [Migration("20250602152359_migr")]
    partial class migr
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HrApp.Domain.Entities.AnonymousFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("AnonymousFeedbacks");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedToTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToTeamId");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.AssignmentNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NotificationMessage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("AssignmentNotification");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.AssignmentRaport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedToTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("OverallRaportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToTeamId");

                    b.HasIndex("OverallRaportId");

                    b.ToTable("AssignmentRaport");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Authorization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VerificationCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("VerificationCodeExpiration")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Authorization");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.CalendarEventCreator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId")
                        .IsUnique();

                    b.ToTable("CalendarEventCreator");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("HomeNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Candidate");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HeadOfDepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TeamTag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("HeadOfDepartmentId")
                        .IsUnique();

                    b.HasIndex("TeamTag")
                        .IsUnique();

                    b.ToTable("Department");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.EmployeeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateOnly>("RateDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("RatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RatedById");

                    b.ToTable("EmployeeRate");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.EmploymentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmploymentHistory");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.ExellImport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ImportDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UploadedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UploadedById");

                    b.ToTable("ExellImports");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.GoogleOAuthToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GoogleOAuthToken");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ApplicationDate")
                        .HasColumnType("date");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CvLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OfferID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("OfferID");

                    b.ToTable("JobApplication");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.LeaderFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("LeaderFeedback");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Leave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Leave");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("AddDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<float>("Salary")
                        .HasColumnType("real");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.OverallRaport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("BackupDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("OverallRaport");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Paid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("BaseSalary")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Paid");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.SalaryHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("MonthNYear")
                        .HasColumnType("date");

                    b.Property<float>("Salary")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SalaryHistory");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeamLeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TeamLeaderId")
                        .IsUnique();

                    b.ToTable("Team");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.TeamRaport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OverallRaportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamLeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OverallRaportId");

                    b.HasIndex("TeamLeaderId");

                    b.ToTable("TeamRaport");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfirmationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConfirmationTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamLeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamLeaderId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.UserIpAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserIpAddress");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.UserRaport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OverallRaportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamLeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("YearRoundSalary")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OverallRaportId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamLeaderId");

                    b.ToTable("UserRaport");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.WorkLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkLog");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.WorkLogExportHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExportDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExportedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExportedForUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExportedByUserId");

                    b.HasIndex("ExportedForUserId");

                    b.ToTable("WorkLogExportHistory");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.WorkedHoursRaport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("MonthNYear")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorkedHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkedHoursRaport");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.AnonymousFeedback", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.Team", "Team")
                        .WithMany("AnonymousFeedbacks")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Assignment", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.Team", "AssignedToTeam")
                        .WithMany("Assignments")
                        .HasForeignKey("AssignedToTeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AssignedToTeam");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.AssignmentNotification", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.Assignment", "Assignment")
                        .WithMany("AssignmentNotifications")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.AssignmentRaport", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.TeamRaport", "AssignedToTeam")
                        .WithMany("Assignments")
                        .HasForeignKey("AssignedToTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrApp.Domain.Entities.OverallRaport", "OverallRaport")
                        .WithMany("AssignmentRaport")
                        .HasForeignKey("OverallRaportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToTeam");

                    b.Navigation("OverallRaport");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Authorization", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.User", "User")
                        .WithOne("Authorization")
                        .HasForeignKey("HrApp.Domain.Entities.Authorization", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.CalendarEventCreator", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.Calendar", "Calendar")
                        .WithOne("Creator")
                        .HasForeignKey("HrApp.Domain.Entities.CalendarEventCreator", "CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Department", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.User", "HeadOfDepartment")
                        .WithOne("Department")
                        .HasForeignKey("HrApp.Domain.Entities.Department", "HeadOfDepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HeadOfDepartment");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.EmployeeRate", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.User", "Employee")
                        .WithMany("EmployeeRates")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.User", "RatedBy")
                        .WithMany("Rater")
                        .HasForeignKey("RatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("RatedBy");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.EmploymentHistory", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.User", "User")
                        .WithMany("EmploymentHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.ExellImport", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.User", "UploadedBy")
                        .WithMany("ExellImports")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.GoogleOAuthToken", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.User", "User")
                        .WithMany("GoogleOAuthTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.JobApplication", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.Candidate", "Candidate")
                        .WithMany("JobApplications")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.Offer", "Offer")
                        .WithMany("JobApplications")
                        .HasForeignKey("OfferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.LeaderFeedback", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.Assignment", "Assignment")
                        .WithMany("LeaderFeedbacks")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Leave", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.User", "User")
                        .WithMany("Leaves")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Offer", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.Team", "Team")
                        .WithMany("Offers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Paid", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.User", "User")
                        .WithOne("Paid")
                        .HasForeignKey("HrApp.Domain.Entities.Paid", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.SalaryHistory", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.User", "User")
                        .WithMany("SalaryHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Team", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.Department", "Department")
                        .WithMany("Teams")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.User", "TeamLeader")
                        .WithOne()
                        .HasForeignKey("HrApp.Domain.Entities.Team", "TeamLeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("TeamLeader");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.TeamRaport", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.OverallRaport", "OverallRaport")
                        .WithMany("TeamRaport")
                        .HasForeignKey("OverallRaportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.UserRaport", "TeamLeader")
                        .WithMany()
                        .HasForeignKey("TeamLeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OverallRaport");

                    b.Navigation("TeamLeader");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.User", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.Team", "Team")
                        .WithMany("Employers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HrApp.Domain.Entities.Team", "TeamLeader")
                        .WithMany()
                        .HasForeignKey("TeamLeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Team");

                    b.Navigation("TeamLeader");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.UserIpAddress", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.User", "User")
                        .WithMany("IpAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.UserRaport", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.OverallRaport", "OverallRaport")
                        .WithMany("UserRaport")
                        .HasForeignKey("OverallRaportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.TeamRaport", "Team")
                        .WithMany("Employers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrApp.Domain.Entities.TeamRaport", "TeamLeader")
                        .WithMany()
                        .HasForeignKey("TeamLeaderId");

                    b.Navigation("OverallRaport");

                    b.Navigation("Team");

                    b.Navigation("TeamLeader");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.WorkLog", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.User", "User")
                        .WithMany("WorkLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.WorkLogExportHistory", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.User", "ExportedByUser")
                        .WithMany("ExportedWorkLogs")
                        .HasForeignKey("ExportedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.User", "ExportedForUser")
                        .WithMany("ReceivedExportedWorkLogs")
                        .HasForeignKey("ExportedForUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExportedByUser");

                    b.Navigation("ExportedForUser");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.WorkedHoursRaport", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.User", "User")
                        .WithMany("WorkedHoursRaports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("HrApp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Assignment", b =>
                {
                    b.Navigation("AssignmentNotifications");

                    b.Navigation("LeaderFeedbacks");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Calendar", b =>
                {
                    b.Navigation("Creator")
                        .IsRequired();
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Candidate", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Department", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Offer", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.OverallRaport", b =>
                {
                    b.Navigation("AssignmentRaport");

                    b.Navigation("TeamRaport");

                    b.Navigation("UserRaport");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.Team", b =>
                {
                    b.Navigation("AnonymousFeedbacks");

                    b.Navigation("Assignments");

                    b.Navigation("Employers");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.TeamRaport", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Employers");
                });

            modelBuilder.Entity("HrApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Authorization")
                        .IsRequired();

                    b.Navigation("Department")
                        .IsRequired();

                    b.Navigation("EmployeeRates");

                    b.Navigation("EmploymentHistories");

                    b.Navigation("ExellImports");

                    b.Navigation("ExportedWorkLogs");

                    b.Navigation("GoogleOAuthTokens");

                    b.Navigation("IpAddresses");

                    b.Navigation("Leaves");

                    b.Navigation("Paid")
                        .IsRequired();

                    b.Navigation("Rater");

                    b.Navigation("ReceivedExportedWorkLogs");

                    b.Navigation("SalaryHistory");

                    b.Navigation("WorkLogs");

                    b.Navigation("WorkedHoursRaports");
                });
#pragma warning restore 612, 618
        }
    }
}
